import os
from setuptools import setup, find_packages
from subprocess import check_output
from setuptools.dist import Distribution

# Declare your non-python data files:
# Files underneath configuration/ will be copied into the build preserving the
# subdirectory structure if they exist.
#data_files = []
#for root, dirs, files in os.walk('configuration'):
#    data_files.append((os.path.relpath(root, 'configuration'),
#                       [os.path.join(root, f) for f in files]))

data_files = []
for path, dirnames, filenames in os.walk('python'):
    for filename in filenames:
        data_files.append(os.path.join(path, filename))
data_files.append('../build/lib/libdlr.so')


class BinaryDistribution(Distribution):
    def has_ext_modules(self):
        return True

    def is_pure(self):
        return False


setup(
    name="dlr",
    version="1.0",

    zip_safe=False,
    install_requires=['numpy', 'decorator'],

    distclass=BinaryDistribution,

    # declare your packages
    packages=find_packages(),

    # include data files
    include_package_data=True,
    data_files=[('dlr', data_files)],

    # set up the shebang
    options={
        # make sure the right shebang is set for the scripts - use the
        # environment default Python
        'build_scripts': {
            'executable': '/apollo/sbin/envroot "$ENVROOT/bin/python"',
        },
    },

    # declare your scripts
    # If you want to create any Python executables in bin/, define them here.
    # This is a three-step process:
    #
    # 1. Create the function you want to run on the CLI in src/dlr/cli.py
    #    For convenience I usually recommend calling it main()
    #
    # 2. Uncomment this section of the setup.py arguments; this will create
    #    bin/DLR (which you can obviously change!) as a script
    #    that will call your main() function, above.
    #
    # entry_points="""\
    # [console_scripts]
    # DLR = dlr.cli:main
    # """,
    #
    # 3. Add a dependency on BrazilPython-setuptools = default into the
    #    dependencies section of your Config. This is necessary for the script
    #    generated by setuptools to find its function.

    # Setting this value to "True" puts the first version's scripts into
    # $ENVROOT/bin. This is valid for most versionsets, because usually you'll
    # only have the one. If you have a special case where what you really want
    # is to keep a particular version in bin/ then you should change this to a
    # string that identifies that version. Those strings will take the form
    # 'python3.6' or 'jython2.7' etc.
    #
    # Note: You almost certainly don't want to do that.
    root_script_source_version='python3.4',
    default_python='python3.4',
    # Use the pytest brazilpython runner. Provided by BrazilPython-Pytest.
    test_command='brazilpython_pytest',

    # Use custom sphinx command which adds an index.html that's compatible with
    # code.amazon.com links.
    doc_command='amazon_doc_utils_build_sphinx',
)
